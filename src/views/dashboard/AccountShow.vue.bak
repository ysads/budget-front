<template>
  <div class="account-show">
    <loading
      v-if="isEmpty(account)"
      class="account-show__loading"
      data-test="loading"
    />
    <div v-else>
      <account-header
        :name="account.name"
        :cleared="account.clearedBalance"
        :uncleared="account.unclearedBalance"
        :budget="openBudget"
        data-test="header"
      />
      <account-toolbar
        :account="account"
        data-test="toolbar"
      />
      <transaction-list
        :transactions="transactions"
        data-test="transaction-list"
      />
    </div>
  </div>
</template>

<script>
import { computed, onMounted, watchEffect } from '@vue/composition-api'
import { openBudget } from '@/repositories/budgets'
import { getAccountById } from '@/repositories/accounts'
import { getTransactions, transactions } from '@/repositories/transactions'
import { useI18n } from '@/use/i18n'
import alert from '@/support/alert'
import AccountHeader from '@/components/accounts/AccountHeader'
import AccountToolbar from '@/components/accounts/AccountToolbar'
import TransactionList from '@/components/transactions/TransactionList'
import Loading from '@/components/Loading'
import isEmpty from 'lodash/isEmpty'
import useRouter from '@/use/router'

export default {
  name: 'AccountShow',

  components: {
    AccountHeader,
    AccountToolbar,
    Loading,
    TransactionList,
  },

  setup () {
    const { t } = useI18n()
    const { route, router } = useRouter()

    const accountId = computed(() => route.params.id)
    const account = computed(() => getAccountById(accountId.value) || {})

    const fetchTransactions = async () => {
      await getTransactions({
        budgetId: openBudget.value.id,
        originId: accountId.value,
      })
    }

    watchEffect(() => fetchTransactions())

    onMounted(() => {
      if (isEmpty(account.value)) {
        alert.error(t('errors.accounts.not-found'))
        router.push({
          name: 'AllAccounts',
          params: { budgetId: openBudget.value.id },
        })
      }
      fetchTransactions()
    })

    return {
      account,
      accountId,
      fetchTransactions,
      isEmpty,
      openBudget,
      transactions,
    }
  },
}
</script>
